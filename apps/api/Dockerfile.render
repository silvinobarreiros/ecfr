################################################################################
# Base Layer
################################################################################
FROM node:20.12-alpine AS base

ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable

################################################################################
# Dependencies Layer
################################################################################
FROM base AS deps

RUN apk add --no-cache libc6-compat
RUN apk update
WORKDIR /opt

# Copy only necessary files for installing dependencies
COPY package.json pnpm-lock.yaml ./

# Use cache to install dependencies
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile

################################################################################
# Turbo Layer
################################################################################
FROM deps AS turbo

RUN pnpm install -g turbo@2.1.0

################################################################################
# Builder Layer
################################################################################
FROM turbo AS builder

WORKDIR /opt
COPY . .

# Prune workspace using Turbo
RUN turbo prune api --docker

################################################################################
# Installer Layer
################################################################################
FROM turbo AS installer

WORKDIR /opt
COPY --from=builder /opt/out/json/ .
COPY --from=builder /opt/out/pnpm-lock.yaml ./pnpm-lock.yaml

ENV TURBO_TELEMETRY_DISABLED=1

# Copy installed dependencies
COPY --from=deps /opt/node_modules ./node_modules

# Install any additional dependencies for the pruned workspace
RUN pnpm install

# Build the project
COPY --from=builder /opt/out/full/ .
COPY turbo.json turbo.json

RUN turbo build --filter=api...

################################################################################
# Development Layer
################################################################################
FROM turbo AS development

WORKDIR /opt

# Copy necessary files and folders for running the application
COPY --from=installer /opt .

# Mount secrets from render for migrations and move them to apps/api/.env
# RUN --mount=type=secret,id=_env,dst=/etc/secrets/.env cp /etc/secrets/.env apps/api/.env

# Set environment variables if needed
ENV NODE_ENV=production

CMD node apps/api/dist/src/main.js
